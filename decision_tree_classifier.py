# -*- coding: utf-8 -*-
"""Decision Tree Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18tU8AQ_w46QMY_W2VxVUAyboHf4u4twb

#**THE SPARK FOUNDATION**

### Data Science and Business Analytics Intern - Sushmitha TP

TASK : **Decison Tree Classifier and EDA**

DATASET : Iris Dataset

LANGUAGE : Python

## Decision Tree Classifier
 #####   Decision Tree Classifier is a simple and widely used classification technique. It applies a straitforward idea to solve the classification problem

 ## Iris Dataset
 ##### It consists of 4 attributes SepalLength SepalWidth PetalLength PetalWidth with the information gain from this we classify Iris Specis as Iris-setosa,Iris-versicolor or Iris-virginica.

Lets begin by importing required libraries and dataset.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
# %matplotlib inline
from sklearn import tree

#setting the size of the figures using matplotlib
plt.rcParams['figure.figsize'] = (15.0, 5.0)

iris = pd.read_csv('Iris.csv')

"""### Exploring Data Set"""

iris.head()

"""We can observe that Id attribute is not related to tree classification and it can be removed."""

iris.drop(["Id"],axis=1,inplace=True)
iris.head()

iris.info()

iris.describe()

iris.corr()

"""Lets check for null values in iris dataset"""

iris.isnull().sum()

"""Since there is no null value in any attribute we can continue with eda and model construction.

### Visualizations
"""

sns.countplot(iris['Species'])

"""From the visualization we see that all 3 species are in equal instances in datset

"""

iris['Species'].unique()

sns.pairplot(iris,hue='Species')

"""This shows the distribution of each attributes in their range"""

sns.boxplot(x='Species', y='SepalLengthCm',data=iris)

"""From this we can say that setosa have smallest Sepal Length and Virginica have largest Sepal Length"""

sns.boxplot(x='Species', y='SepalWidthCm',data=iris)

"""We can say that Setosa seems to have most spread in Sepal Width than other species"""

sns.boxplot(x='Species', y='PetalLengthCm',data=iris)

"""We can say that Setosa has smallest Petal length and Virginica has largest Petal length """

sns.boxplot(x='Species', y='PetalWidthCm',data=iris)

"""We can say that Setosa has smallest Petal width and Virginica has largest Petal width

####As now we are familiar with our dataset we can start with building Decision Tree Model

### **Feature Selection and Splitting between Training and Test Set**
"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

x=iris.iloc[:,iris.columns!="Species"]
y=iris.iloc[:,iris.columns=="Species"]

x.head()

y.head()

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=0)

"""### **Decision Tree**



"""

model=DecisionTreeClassifier()

"""**Train model**"""

model.fit(x_train,y_train)

"""**Testing and Visualizating Tree model**"""

outputDTC=model.predict(x_test)
print(outputDTC)

names=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']
classes=['setosa','versicolor','virginica']
fig,axes=plt.subplots(nrows=1,ncols=1,figsize=(4,4),dpi=300)
tree.plot_tree(model,feature_names=names,class_names=classes,filled= True);

"""**Check the Accuracy of Predictions**"""

accuracy=accuracy_score(y_test,outputDTC)
print("accuracy score:",accuracy)

"""**Constructing Confusion Matrix**"""

confusion_matrix(y_test,outputDTC)

"""As this shows an accuracy of 97% for Test set we can choose this model."""

